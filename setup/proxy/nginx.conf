# Nginx Configuration for Portfolio API Gateway
# Auto-generated from service config.yml files
# DO NOT EDIT MANUALLY - Use scripts/setup/src/config_generator.py

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/json
        application/javascript
        application/xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Dynamic upstream definitions
    upstream personal_info_server {
        server personal-info-lambda:8080;
        keepalive 32;
    }

    upstream experience_server {
        server experience-lambda:8080;
        keepalive 32;
    }

    upstream skills_server {
        server skills-lambda:8080;
        keepalive 32;
    }

    upstream projects_server {
        server projects-lambda:8080;
        keepalive 32;
    }

    # Website upstream (Astro v5)
    upstream website_server {
        server portfolio-website:4321;
        keepalive 16;
    }


    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=30r/s;

    # Main server block - Unified entry point for all services
    server {
        listen 80;
        server_name localhost;

        # Add security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Simplified CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;

        # Health check endpoint
        location /health {
            limit_req zone=health burst=10 nodelay;
            access_log off;
            return 200 '{"status":"healthy","service":"unified-gateway","port":"4321","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }



        # API Routes - Personal information management Lambda function
        location /api/personal-info {
            limit_req zone=api burst=20 nodelay;

            # Lambda Runtime Interface Emulator configuration
            proxy_method POST;
            proxy_pass_request_headers off;
            proxy_set_header Content-Type "application/json";

            # Strip /api prefix and create Lambda event with correct path
            set $lambda_path $uri;
            if ($uri ~ "^/api(.*)") {
                set $lambda_path $1;
            }

            # Create complete API Gateway v2 Lambda event
            set $lambda_event '{"version":"2.0","routeKey":"ANY $lambda_path","rawPath":"$lambda_path","requestContext":{"http":{"method":"$request_method","path":"$lambda_path","protocol":"HTTP/1.1","sourceIp":"127.0.0.1"},"stage":"prod","requestId":"nginx-proxy"},"headers":{},"body":"$request_body","isBase64Encoded":false}';
            proxy_set_body $lambda_event;

            # Proxy to Lambda Runtime Interface
            proxy_pass http://personal_info_server/2015-03-31/functions/function/invocations;

            # Basic proxy settings
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API Routes - Professional experience management Lambda function
        location /api/experience {
            limit_req zone=api burst=20 nodelay;

            # Lambda Runtime Interface Emulator configuration
            proxy_method POST;
            proxy_pass_request_headers off;
            proxy_set_header Content-Type "application/json";

            # Strip /api prefix and create Lambda event with correct path
            set $lambda_path $uri;
            if ($uri ~ "^/api(.*)") {
                set $lambda_path $1;
            }

            # Create complete API Gateway v2 Lambda event
            set $lambda_event '{"version":"2.0","routeKey":"ANY $lambda_path","rawPath":"$lambda_path","requestContext":{"http":{"method":"$request_method","path":"$lambda_path","protocol":"HTTP/1.1","sourceIp":"127.0.0.1"},"stage":"prod","requestId":"nginx-proxy"},"headers":{},"body":"$request_body","isBase64Encoded":false}';
            proxy_set_body $lambda_event;

            # Proxy to Lambda Runtime Interface
            proxy_pass http://experience_server/2015-03-31/functions/function/invocations;

            # Basic proxy settings
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API Routes - Technical skills management Lambda function
        location /api/skills {
            limit_req zone=api burst=20 nodelay;

            # Lambda Runtime Interface Emulator configuration
            proxy_method POST;
            proxy_pass_request_headers off;
            proxy_set_header Content-Type "application/json";

            # Strip /api prefix and create Lambda event with correct path
            set $lambda_path $uri;
            if ($uri ~ "^/api(.*)") {
                set $lambda_path $1;
            }

            # Create complete API Gateway v2 Lambda event
            set $lambda_event '{"version":"2.0","routeKey":"ANY $lambda_path","rawPath":"$lambda_path","requestContext":{"http":{"method":"$request_method","path":"$lambda_path","protocol":"HTTP/1.1","sourceIp":"127.0.0.1"},"stage":"prod","requestId":"nginx-proxy"},"headers":{},"body":"$request_body","isBase64Encoded":false}';
            proxy_set_body $lambda_event;

            # Proxy to Lambda Runtime Interface
            proxy_pass http://skills_server/2015-03-31/functions/function/invocations;

            # Basic proxy settings
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API Routes - Project portfolio management Lambda function
        location /api/projects {
            limit_req zone=api burst=20 nodelay;

            # Lambda Runtime Interface Emulator configuration
            proxy_method POST;
            proxy_pass_request_headers off;
            proxy_set_header Content-Type "application/json";

            # Strip /api prefix and create Lambda event with correct path
            set $lambda_path $uri;
            if ($uri ~ "^/api(.*)") {
                set $lambda_path $1;
            }

            # Create complete API Gateway v2 Lambda event
            set $lambda_event '{"version":"2.0","routeKey":"ANY $lambda_path","rawPath":"$lambda_path","requestContext":{"http":{"method":"$request_method","path":"$lambda_path","protocol":"HTTP/1.1","sourceIp":"127.0.0.1"},"stage":"prod","requestId":"nginx-proxy"},"headers":{},"body":"$request_body","isBase64Encoded":false}';
            proxy_set_body $lambda_event;

            # Proxy to Lambda Runtime Interface
            proxy_pass http://projects_server/2015-03-31/functions/function/invocations;

            # Basic proxy settings
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Website - Astro v5 at root path /
        location / {
            proxy_pass http://website_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Enable WebSocket support for Astro dev server
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Handle trailing slashes and static assets
            try_files $uri $uri/ @website;
        }

        # Fallback for website routing
        location @website {
            proxy_pass http://website_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
