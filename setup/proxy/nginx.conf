# Nginx Configuration for Portfolio API Gateway
# Routes requests to backend microservices

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/json
        application/javascript
        application/xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Backend upstream definitions
    upstream personal_info_backend {
        server personal-info-service:8080;
        keepalive 32;
    }

    upstream experience_backend {
        server experience-service:8080;
        keepalive 32;
    }

    upstream projects_backend {
        server projects-service:8080;
        keepalive 32;
    }

    upstream skills_backend {
        server skills-service:8080;
        keepalive 32;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=30r/s;

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Add security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain; charset=utf-8";
            add_header Content-Length 0;
            return 204;
        }

        # Health check endpoint
        location /health {
            limit_req zone=health burst=10 nodelay;
            access_log off;
            return 200 '{"status":"healthy","service":"api-gateway","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # API routing with rate limiting
        location /api/personal-info {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/personal-info/?(.*) /$1 break;
            proxy_pass http://personal_info_backend;
            include /etc/nginx/conf.d/proxy.conf;
        }

        location /api/experience {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/experience/?(.*) /$1 break;
            proxy_pass http://experience_backend;
            include /etc/nginx/conf.d/proxy.conf;
        }

        location /api/projects {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/projects/?(.*) /$1 break;
            proxy_pass http://projects_backend;
            include /etc/nginx/conf.d/proxy.conf;
        }

        location /api/skills {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/skills/?(.*) /$1 break;
            proxy_pass http://skills_backend;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Default response for unmatched routes
        location / {
            return 404 '{"error":"Not Found","message":"API endpoint not found","service":"api-gateway"}';
            add_header Content-Type application/json;
        }
    }
}