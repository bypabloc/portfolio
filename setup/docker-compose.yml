# Portfolio Serverless System - Base Docker Compose Configuration
# Astro v5 + AWS Lambda + FastAPI + Neon PostgreSQL Architecture
# Runtime environment for local development

name: portfolio

networks:
  portfolio-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16

volumes:
  postgres-data:
    driver: local
  postgres-logs:
    driver: local

services:
  # Database Layer - PostgreSQL 17 with Neon compatibility
  portfolio-db:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: portfolio-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=portfolio_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=portfolio_password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-logs:/var/log/postgresql
      - ./database/init-portfolio-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ../db/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    # No external ports - only accessible through API Gateway network
    networks:
      portfolio-network:
        ipv4_address: 172.26.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d portfolio_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Neon Proxy - WebSocket and HTTP proxy for serverless driver compatibility
  # Temporarily disabled - heavy build process, not critical for development
  # neon-proxy:
  #   build:
  #     context: ./database
  #     dockerfile: neon-proxy.Dockerfile
  #   container_name: neon-proxy
  #   restart: unless-stopped
  #   depends_on:
  #     portfolio-db:
  #       condition: service_healthy
  #   environment:
  #     - PG_CONNECTION_STRING=postgres://postgres:portfolio_password@portfolio-db:5432/portfolio_local
  #   ports:
  #     - "4444:4444"
  #   networks:
  #     portfolio-network:
  #       ipv4_address: 172.20.0.11
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:4444"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s


  # FastAPI Services - Internal access only (no external ports)
  personal-info-lambda:
    build:
      context: ../server
      dockerfile: lambda/personal-info/Dockerfile.dev
    container_name: personal-info-lambda
    restart: unless-stopped
    depends_on:
      portfolio-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:portfolio_password@portfolio-db:5432/portfolio_local
      - NEON_DATABASE_URL=postgresql://postgres:portfolio_password@portfolio-db:5432/portfolio_local
      - LOG_LEVEL=info
    # No external ports - only accessible through API Gateway
    networks:
      portfolio-network:
        ipv4_address: 172.26.0.21
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "http://localhost:8080/2015-03-31/functions/function/invocations", "-d", '{"httpMethod":"GET","path":"/health","headers":{},"body":""}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  skills-lambda:
    build:
      context: ../server
      dockerfile: lambda/skills/Dockerfile.dev
    container_name: skills-lambda
    restart: unless-stopped
    depends_on:
      portfolio-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:portfolio_password@portfolio-db:5432/portfolio_local
      - NEON_DATABASE_URL=postgresql://postgres:portfolio_password@portfolio-db:5432/portfolio_local
      - LOG_LEVEL=info
    # No external ports - only accessible through API Gateway
    networks:
      portfolio-network:
        ipv4_address: 172.26.0.22
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "http://localhost:8080/2015-03-31/functions/function/invocations", "-d", '{"httpMethod":"GET","path":"/health","headers":{},"body":""}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  experience-lambda:
    build:
      context: ../server
      dockerfile: lambda/experience/Dockerfile.dev
    container_name: experience-lambda
    restart: unless-stopped
    depends_on:
      portfolio-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:portfolio_password@portfolio-db:5432/portfolio_local
      - NEON_DATABASE_URL=postgresql://postgres:portfolio_password@portfolio-db:5432/portfolio_local
      - LOG_LEVEL=info
    # No external ports - only accessible through API Gateway
    networks:
      portfolio-network:
        ipv4_address: 172.26.0.23
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "http://localhost:8080/2015-03-31/functions/function/invocations", "-d", '{"httpMethod":"GET","path":"/health","headers":{},"body":""}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  projects-lambda:
    build:
      context: ../server
      dockerfile: lambda/projects/Dockerfile.dev
    container_name: projects-lambda
    restart: unless-stopped
    depends_on:
      portfolio-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:portfolio_password@portfolio-db:5432/portfolio_local
      - NEON_DATABASE_URL=postgresql://postgres:portfolio_password@portfolio-db:5432/portfolio_local
      - LOG_LEVEL=info
    # No external ports - only accessible through API Gateway
    networks:
      portfolio-network:
        ipv4_address: 172.26.0.24
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "http://localhost:8080/2015-03-31/functions/function/invocations", "-d", '{"httpMethod":"GET","path":"/health","headers":{},"body":""}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


  # API Gateway - Unified entry point for all services (dynamically configured)
  api-gateway:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: unless-stopped
    depends_on:
      - personal-info-lambda
      - skills-lambda
      - experience-lambda
      - projects-lambda
      - portfolio-website
    environment:
      - NGINX_ENV=development
      - UNIFIED_PORT=${UNIFIED_PORT:-4321}
    ports:
      - "${UNIFIED_PORT:-4321}:80"
    networks:
      portfolio-network:
        ipv4_address: 172.26.0.30
    volumes:
      # Use dynamically generated nginx config if exists, fallback to static
      - ./generated/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./proxy/conf.d:/etc/nginx/conf.d:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Website - Astro v5 development server
  portfolio-website:
    build:
      context: ../website
      dockerfile: ../website/Dockerfile
      args:
        - NODE_ENV=development
    container_name: portfolio-website
    restart: unless-stopped
    depends_on:
      portfolio-db:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - ASTRO_PORT=4321
      - API_BASE_URL=http://localhost:${UNIFIED_PORT:-4321}/api
      - NEON_DATABASE_URL=postgresql://postgres:portfolio_password@portfolio-db:5432/portfolio_local
      - UNIFIED_PORT=${UNIFIED_PORT:-4321}
    # No external ports - only accessible through API Gateway
    networks:
      portfolio-network:
        ipv4_address: 172.26.0.40
    volumes:
      - ../website/src:/website/src
      - ../website/public:/website/public
      - /website/node_modules  # Anonymous volume for node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4321"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development Tools Container
  dev-tools:
    image: alpine:latest
    container_name: dev-tools
    restart: "no"
    command: ["sleep", "infinity"]
    networks:
      - portfolio-network
    volumes:
      - .:/workspace
    working_dir: /workspace
    profiles:
      - tools

  # LocalStack - AWS Services Emulation for Local Development
  # Temporarily disabled - not needed for current development workflow
  # Uncomment when AWS service emulation is required
  # localstack:
  #   image: localstack/localstack:latest
  #   container_name: portfolio-localstack
  #   restart: unless-stopped
  #   environment:
  #     - SERVICES=lambda,apigateway,iam,sts,logs,cloudformation
  #     - DEBUG=1
  #     - DOCKER_HOST=unix:///var/run/docker.sock
  #     - HOSTNAME_EXTERNAL=localstack
  #     - AWS_DEFAULT_REGION=us-east-1
  #     - AWS_ACCESS_KEY_ID=test
  #     - AWS_SECRET_ACCESS_KEY=test
  #     - LAMBDA_EXECUTOR=docker
  #     - LAMBDA_DOCKER_NETWORK=portfolio_portfolio-network
  #     - LAMBDA_REMOVE_CONTAINERS=true
  #     - API_GATEWAY_ENDPOINT_STRATEGY=domain
  #   ports:
  #     - "4566:4566"  # LocalStack Gateway
  #     - "4510-4559:4510-4559"  # External services port range
  #   networks:
  #     portfolio-network:
  #       ipv4_address: 172.20.0.50
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #     - "../scripts/setup/localstack:/etc/localstack/init/ready.d"
  #     # Note: localstack-data volume removed to avoid permission issues
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s