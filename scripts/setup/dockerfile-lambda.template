FROM public.ecr.aws/lambda/python:3.13

LABEL maintainer="Pablo Contreras <pablo@bypabloc.dev>"
LABEL project="Portfolio Serverless System"
LABEL service="{service_name}-lambda"
LABEL environment="{environment}"

# Install basic system packages for tools
RUN microdnf install -y tar gzip && microdnf clean all

{development_tools}

WORKDIR ${{LAMBDA_TASK_ROOT}}

# ============================================================================
# STAGE 1: Install shared dependencies and copy shared code
# ============================================================================

# Copy shared requirements FIRST (better Docker layer caching)
# Note: Build context is server/, so paths are relative to server/
COPY shared/requirements.txt /tmp/shared-requirements.txt

# Install shared dependencies (FastAPI, SQLModel, AsyncPG, etc.)
RUN pip install --no-cache-dir -r /tmp/shared-requirements.txt

# Copy shared code (models, database, repositories, schemas)
# This makes server/shared/ available as a Python module
COPY shared/ ${{LAMBDA_TASK_ROOT}}/shared/

# ============================================================================
# STAGE 2: Install Lambda-specific dependencies
# ============================================================================

# Copy Lambda-specific requirements (if any additional deps needed)
COPY lambda/{service_name}/setup/requirements.txt /tmp/lambda-requirements.txt
RUN pip install --no-cache-dir -r /tmp/lambda-requirements.txt || true

# Install tools installer dependencies (for dev environment)
RUN pip install --no-cache-dir pyyaml httpx

# ============================================================================
# STAGE 3: Copy Lambda function code and tools
# ============================================================================

# Copy Lambda function code to Lambda task root
COPY lambda/{service_name}/src/ ${{LAMBDA_TASK_ROOT}}/

# Copy Python tools installer system
RUN mkdir -p ${{LAMBDA_TASK_ROOT}}/scripts/setup
COPY scripts/setup/lambda_tools_installer.py ${{LAMBDA_TASK_ROOT}}/scripts/setup/lambda_tools_installer.py
COPY scripts/setup/install_lambda_tools.sh /usr/local/bin/install_lambda_tools.sh
RUN chmod +x /usr/local/bin/install_lambda_tools.sh

# Copy tools scripts (tree.sh and other tools)
RUN mkdir -p ${{LAMBDA_TASK_ROOT}}/scripts/setup/tools
COPY scripts/setup/tools/tree.sh ${{LAMBDA_TASK_ROOT}}/scripts/setup/tools/tree.sh
RUN chmod +x ${{LAMBDA_TASK_ROOT}}/scripts/setup/tools/tree.sh

# Set Python path to include shared modules
ENV PYTHONPATH="${{LAMBDA_TASK_ROOT}}:${{LAMBDA_TASK_ROOT}}/shared:${{PYTHONPATH}}"

# Environment-specific configurations
ENV LOG_LEVEL={log_level}
ENV ENVIRONMENT={environment}
ENV SERVICE_NAME={service_name}-lambda
ENV SERVICE_VERSION=1.0.0
ENV FASTAPI_DEBUG={debug_mode}

{development_config}

# Create useful directories for development
RUN mkdir -p /tmp/logs /tmp/cache /tmp/debug

# Expose port for local development (Lambda Runtime Interface Emulator)
EXPOSE 8080

# Health check for container orchestration
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Auto-install Lambda tools on container startup (non-blocking)
RUN echo '#!/bin/bash' > /usr/local/bin/entrypoint-with-tools.sh && \
    echo '/usr/local/bin/install_lambda_tools.sh {service_name} 2>/dev/null &' >> /usr/local/bin/entrypoint-with-tools.sh && \
    echo 'exec "$@"' >> /usr/local/bin/entrypoint-with-tools.sh && \
    chmod +x /usr/local/bin/entrypoint-with-tools.sh

# Set custom entrypoint that auto-installs tools based on config
ENTRYPOINT ["/usr/local/bin/entrypoint-with-tools.sh"]

# Lambda handler entry point
CMD ["lambda_function.lambda_handler"]