# API Gateway Configuration for Personal Info Lambda
# Portfolio Serverless System - Personal Information Service

lambda_function:
  name: personal-info
  description: "Personal information management Lambda function"
  handler: lambda_function.lambda_handler
  runtime: python3.12
  timeout: 30
  memory_size: 512

  # Environment variables for Lambda
  environment_variables:
    DATABASE_URL: "postgresql://postgres:portfolio_password@portfolio-db:5432/portfolio_local"
    NEON_DATABASE_URL: "postgresql://postgres:portfolio_password@neon-proxy:5433/portfolio_local"
    LOG_LEVEL: "info"
    ENVIRONMENT: "local"
    SERVICE_NAME: "personal-info"

  # Shared modules this lambda uses
  shared_modules:
    - database
    - models
    - repository
    - config
    - utils
    - exceptions

api_gateway:
  # API Gateway resource configuration
  resource:
    path: "personal-info"
    description: "Personal information endpoints"

  # HTTP methods and their configurations
  methods:
    - http_method: GET
      description: "Get personal information"
      authorization: NONE
      cors_enabled: true
      request_parameters: {}
      request_validator: none

    - http_method: PUT
      description: "Update personal information"
      authorization: NONE
      cors_enabled: true
      request_parameters: {}
      request_validator: body

    - http_method: POST
      description: "Create personal information"
      authorization: NONE
      cors_enabled: true
      request_parameters: {}
      request_validator: body

  # CORS configuration
  cors:
    allow_origins:
      - "*"
    allow_methods:
      - "GET"
      - "POST"
      - "PUT"
      - "DELETE"
      - "OPTIONS"
    allow_headers:
      - "Content-Type"
      - "X-Amz-Date"
      - "Authorization"
      - "X-Api-Key"
      - "X-Amz-Security-Token"
      - "X-Correlation-ID"
    max_age: 3600

  # Integration configuration
  integration:
    type: AWS_PROXY
    integration_method: POST
    passthrough_behavior: WHEN_NO_MATCH
    content_handling: CONVERT_TO_TEXT
    timeout: 29000

  # Response configuration
  responses:
    - status_code: 200
      description: "Successful response"
      headers:
        Access-Control-Allow-Origin: "'*'"
        Content-Type: "'application/json'"

    - status_code: 400
      description: "Bad request"
      headers:
        Access-Control-Allow-Origin: "'*'"
        Content-Type: "'application/json'"

    - status_code: 404
      description: "Not found"
      headers:
        Access-Control-Allow-Origin: "'*'"
        Content-Type: "'application/json'"

    - status_code: 500
      description: "Internal server error"
      headers:
        Access-Control-Allow-Origin: "'*'"
        Content-Type: "'application/json'"

# Testing configuration
testing:
  # Sample requests for testing
  sample_requests:
    - method: GET
      path: "/personal-info"
      description: "Get personal information"
      expected_status: 200

    - method: PUT
      path: "/personal-info"
      description: "Update personal information"
      body: |
        {
          "name": "Pablo Contreras Updated",
          "title": "Senior Python Developer",
          "email": "pablo.updated@bypabloc.dev"
        }
      expected_status: 200

# Monitoring configuration
monitoring:
  cloudwatch_logs: true
  x_ray_tracing: false
  custom_metrics:
    - name: "PersonalInfoRequests"
      unit: "Count"
      description: "Number of personal info requests"
    - name: "PersonalInfoLatency"
      unit: "Milliseconds"
      description: "Personal info response latency"